// Code generated by go generate; DO NOT EDIT.
package main

import (
	"sync"
)

// OpcBroadcaster is the context for keeping track of the clients we should
// broadcast messages to.
type OpcBroadcaster struct {
	sync.Mutex
	clients []*OpcReceiver
}

// NewOpcBroadcaster creates a new OpcBroadcaster.
func NewOpcBroadcaster() *OpcBroadcaster {
	return &OpcBroadcaster{
		clients: make([]*OpcReceiver, 0, 1),
	}
}

// Push adds a new receiver to the Opc broadcaster.
func (bcast *OpcBroadcaster) Push(c *OpcReceiver) {
	bcast.Lock()
	defer bcast.Unlock()

	bcast.clients = append(bcast.clients, c)
}

// Pop removes a receiver from the Opc broadcast.
func (bcast *OpcBroadcaster) Pop(c *OpcReceiver) {
	bcast.Lock()
	defer bcast.Unlock()

	i := -1
	for j, cur := range bcast.clients {
		if cur == c {
			i = j
			break
		}
	}

	if i < 0 {
		return
	}

	// TODO: Keeping clients in a slice might not be the best solution?
	copy(bcast.clients[i:], bcast.clients[i+1:])
	bcast.clients[len(bcast.clients)-1] = nil // or the zero value of T
	bcast.clients = bcast.clients[:len(bcast.clients)-1]
}

// Broadcast calls the given routine for all receivers listening to the broadcast.
func (bcast *OpcBroadcaster) Broadcast(routine func(*OpcReceiver)) {
	bcast.Lock()
	defer bcast.Unlock()

	// Broadcasts to all clients.
	for _, c := range bcast.clients {
		//log.Println("Broadcasting to ", c)
		routine(c)
	}
}
