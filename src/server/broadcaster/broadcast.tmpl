// Code generated by go generate; DO NOT EDIT.
package main

// {{ .Name }}Broadcaster is the context for keeping track of the clients we should
// broadcast messages to.
type {{ .Name }}Broadcaster struct {
	clients map[*{{ .Name }}Receiver]bool
}

// New{{ .Name }}Broadcaster creates a new {{ .Name }}Broadcaster.
func New{{ .Name }}Broadcaster() *{{ .Name }}Broadcaster {
	return &{{ .Name }}Broadcaster{
		clients: make(map[*{{ .Name }}Receiver]bool),
	}
}

// Push adds a new receiver to the {{ .Name }} broadcaster.
func (bcast *{{ .Name }}Broadcaster) Push(c *{{ .Name }}Receiver) {
	bcast.clients[c] = true
}

// Pop removes a receiver from the {{ .Name }} broadcast.
func (bcast *{{ .Name }}Broadcaster) Pop(c *{{ .Name }}Receiver) {
	delete(bcast.clients, c)
}

// Broadcast calls the given routine for all receivers listening to the broadcast.
func (bcast *{{ .Name }}Broadcaster) Broadcast(routine func(*{{ .Name }}Receiver)) {
	// Broadcasts to all clients.
	for c := range bcast.clients {
		routine(c)
	}
}
