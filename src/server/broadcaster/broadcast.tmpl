// Code generated by go generate; DO NOT EDIT.
package main

import (
	"sync"
)

// {{ .Name }}Broadcaster is the context for keeping track of the clients we should
// broadcast control panel messages to.
type {{ .Name }}Broadcaster struct {
	sync.Mutex
	clients []*{{ .Name }}Receiver
}

// Push adds a new client as a broadcast listener to the control panel.
func (bcast *{{ .Name }}Broadcaster) Push(c *{{ .Name }}Receiver) {
	bcast.Lock()
	defer bcast.Unlock()

	bcast.clients = append(bcast.clients, c)
}

// Pop removes a client from the control panel broadcast.
func (bcast *{{ .Name }}Broadcaster) Pop(c *{{ .Name }}Receiver) {
	bcast.Lock()
	defer bcast.Unlock()

	i := -1
	for j, cur := range bcast.clients {
		if cur == c {
			i = j
			break
		}
	}

	if i < 0 {
		return
	}

	// TODO: Keeping clients in a slice might not be the best solution?
	copy(bcast.clients[i:], bcast.clients[i+1:])
	bcast.clients[len(bcast.clients)-1] = nil // or the zero value of T
	bcast.clients = bcast.clients[:len(bcast.clients)-1]
}

// Broadcast will send an incoming message from the control panel to all listening channels.
func (bcast *{{ .Name }}Broadcaster) Broadcast(routine func(*{{ .Name }}Receiver)) {
	bcast.Lock()
	defer bcast.Unlock()

	// Broadcasts to all clients.
	for _, c := range bcast.clients {
		//log.Println("Broadcasting to ", c)
		routine(c)
	}
}
